<!-- RadarGun 3.0 benchmark -->
<benchmark xmlns="urn:radargun:benchmark:3.0">

    <!-- Specifies where should the master open socket  -->
    <master bindAddress="${master.address:127.0.0.1}" port="${master.port:2103}"/>

    <!-- List of cluster configurations where the benchmark should run-->
    <clusters>
        <!-- Equivalent to <cluster size="2" /><cluster size="3" /><cluster size="4" /> -->
        <scale from="5" to="${slaves:5}" inc="1">
            <!-- No groups defined within the cluster -->
            <cluster>
                <group name="g1" size="2"/>
                <group name="g2" size="3"/>
            </cluster>
        </scale>
    </clusters>

    <!-- List of configurations of the services -->
    <configurations>
        <config name="Infinispan 7.0 - distributed">
            <setup plugin="infinispan70" group="g1">
               <embedded xmlns="urn:radargun:plugins:infinispan70:3.0"
                         file="dist-no-tx_site1.xml"
                         cache="testCacheSite1" />
            </setup>
            <setup plugin="infinispan70" group="g2">
               <embedded xmlns="urn:radargun:plugins:infinispan70:3.0"
                         file="dist-no-tx_site2.xml"
                         cache="testCacheSite2" />
            </setup>
        </config>
    </configurations>

    <!-- Sequence of stages executed on the cluster -->
    <rg:scenario xmlns:rg="urn:radargun:benchmark:3.0"
                 xmlns="urn:radargun:stages:core:3.0"
                 xmlns:cache="urn:radargun:stages:cache:3.0">

        <service-start groups="g1"/>
        <service-start groups="g2"/>

        <cache:load num-entries="1000" groups="g1" key-id-offset="0">
            <cache:cache-selector>
                <cache:use-cache cache="testCacheSite1"/>
            </cache:cache-selector>
            <cache:value-generator>
               <cache:cache-aware-text cache-name="testCacheSite1" suffix="SITE1_ORIGINAL" />
            </cache:value-generator>
        </cache:load>

        <cache:load num-entries="1000" groups="g2" key-id-offset="0">
            <cache:cache-selector>
                <cache:use-cache cache="testCacheSite2"/>
            </cache:cache-selector>
            <cache:value-generator>
                <cache:cache-aware-text cache-name="testCacheSite2" suffix="SITE2_ORIGINAL" />
            </cache:value-generator>
        </cache:load>

        <sleep time="90s"/>

        <cache:xs-repl-check entry-size="-1" num-entries="1000" first-entry-offset="0" groups="g1"
                       backup-caches="testCacheSite2_backup"
                       ignore-sum="true">
            <cache:value-generator>
                <cache:cache-aware-text cache-name="testCacheSite1" suffix="SITE1_ORIGINAL" />
            </cache:value-generator>
            <cache:backup-value-generator>
                <cache:cache-aware-text cache-name="testCacheSite2" suffix="SITE2_ORIGINAL" />
            </cache:backup-value-generator>
        </cache:xs-repl-check>

        <cache:xs-repl-check entry-size="-1" num-entries="1000" first-entry-offset="0" groups="g2"
                       backup-caches="testCacheSite1_backup"
                       ignore-sum="true">
            <cache:value-generator>
                <cache:cache-aware-text cache-name="testCacheSite2" suffix="SITE2_ORIGINAL" />
            </cache:value-generator>
            <cache:backup-value-generator>
                <cache:cache-aware-text cache-name="testCacheSite1" suffix="SITE1_ORIGINAL" />
            </cache:backup-value-generator>
        </cache:xs-repl-check>
    </rg:scenario>

    <!-- No reports required for this scenario -->

</benchmark>
