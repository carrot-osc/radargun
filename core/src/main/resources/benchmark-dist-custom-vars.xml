<!-- RadarGun 3.0 benchmark -->
<benchmark xmlns="urn:radargun:benchmark:3.0">

   <!-- Specifies where should the master open socket  -->
   <master bindAddress="${master.address:127.0.0.1}" port="${master.port:2103}"/>

   <!-- List of cluster configurations where the benchmark should run-->
   <clusters>
      <!-- Equivalent to <cluster size="2" /><cluster size="3" /> -->
      <scale from="2" to="3" inc="1">
         <!-- No groups defined within the cluster -->
         <cluster />
      </scale>
   </clusters>

   <!-- List of configurations of the services -->
   <configurations>
      <config name="Infinispan 5.2 - distributed">
         <!-- All slaves use the same configuration -->
         <setup plugin="infinispan52">
            <!-- You can set JVM arguments for slaves here. -->
            <vm-args>
               <memory max="4G" />
            </vm-args>
            <embedded xmlns="urn:radargun:plugins:infinispan52:3.0" file="dist-sync.xml"/>
         </setup>
      </config>
      <config name="Infinispan 6.0 - distributed">
         <setup plugin="infinispan60">
            <vm-args>
               <memory max="4G" />
            </vm-args>
            <embedded xmlns="urn:radargun:plugins:infinispan60:3.0" file="dist-sync.xml"/>
         </setup>
      </config>
   </configurations>

   <!-- Sequence of stages executed on the cluster -->
   <rg:scenario xmlns:rg="urn:radargun:benchmark:3.0" xmlns="urn:radargun:stages:core:3.0">
      <!-- Start services on all nodes -->
      <service-start />
      <!-- Begin monitoring of CPU, memory usage and GC -->
      <jvm-monitor-start />

      <!-- Preload the cache with data -->
      <cache-load num-entries="5000"/>
      <!-- 5 threads will execute random requests against the default cache ('testCache') for 1 minute-->
      <!-- As the test is called 'warmup', performance statistics won't be reported -->
      <basic-operations-legacy-test test-name="warmup" duration="${warmup.duration:1m}" num-threads-per-node="5">
         <key-selector>
            <concurrent-keys total-entries="5000" />
         </key-selector>
      </basic-operations-legacy-test>

      <!-- Remove all data from the default cache -->
      <cache-clear />
      <!-- Again, preload the cache with data -->
      <cache-load num-entries="10000"/>

      <!-- 5, 10 and 50 threads will execute random request for 1 minute against the default cache ('testCache') on different
         set of keys (1k, 2k, 10k entries) -->
      <define value="5, 10, 50" var="threads"/>
      <define value="1000, 2000, 10000" var="entries"/>

      <rg:repeat from="0" to="#{${threads}.size - 1}" inc="1">
         <basic-operations-legacy-test test-name="stress-test" amend-test="true"
                                duration="${test.duration:1m}" num-threads-per-node="#{${threads}.get(${repeat.counter})}">
            <statistics>
               <default>
                  <operation-stats>
                     <default />
                     <histogram />
                  </operation-stats>
               </default>
            </statistics>
            <key-selector>
               <concurrent-keys total-entries="#{${entries}.get(${repeat.counter})}"/>
            </key-selector>
         </basic-operations-legacy-test>
      </rg:repeat>

      <!-- Stop JVM monitoring -->
      <jvm-monitor-stop />
   </rg:scenario>

   <!-- How the statistics are reported -->
   <reports>
      <!-- Produce CSV statistics report -->
      <reporter type="csv" />
      <!-- Produce HTML statistics report -->
      <reporter type="html" />
      <!-- Store Java-serialized version of the results that can be used to re-run the report -->
      <reporter type="serialized" />
   </reports>

</benchmark>
